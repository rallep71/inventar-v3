# app/items/routes.py - Add these routes to your existing routes.py

from flask import render_template, request, redirect, url_for, flash, jsonify
from flask_login import login_required, current_user
from werkzeug.utils import secure_filename
import os
from datetime import datetime
from app import db
from app.items import items
from app.models import Item, Category, Log, User
from app.models import Item, Category, Log, User
from app.config import Config

# Add these helper functions at the top

# Helper functions
def allowed_file(filename):
    """Check if file extension is allowed"""
    return '.' in filename and \
           filename.rsplit('.', 1)[1].lower() in Config.ALLOWED_EXTENSIONS

def generate_item_id(category_prefix):
    """Generate next item ID for a category"""
    last_item = Item.query.filter(
        Item.item_uid.like(f'{category_prefix}-%')
    ).order_by(Item.item_uid.desc()).first()
    
    if last_item:
        last_num = int(last_item.item_uid.split('-')[1])
        new_num = last_num + 1
    else:
        new_num = 1
    
    return f"{category_prefix}-{new_num:04d}"

# Main index route - THIS WAS MISSING!
@items.route("/")
@login_required
def index():
    """Items list with search, filter and pagination"""
    # Get query parameters
    page = request.args.get('page', 1, type=int)
    search = request.args.get('search', '').strip()
    category_id = request.args.get('category', type=int)
    location = request.args.get('location', '').strip()
    status = request.args.get('status', '').strip()
    sort = request.args.get('sort', 'newest')
    
    # Build query
    query = Item.query
    
    # Apply search filter
    if search:
        search_filter = f"%{search}%"
        query = query.filter(
            or_(
                Item.name.ilike(search_filter),
                Item.item_uid.ilike(search_filter),
                Item.brand.ilike(search_filter),
                Item.model.ilike(search_filter),
                Item.description.ilike(search_filter),
                Item.serial_number.ilike(search_filter)
            )
        )
    
    # Apply category filter
    if category_id:
        query = query.join(Item.categories).filter(Category.id == category_id)
    
    # Apply location filter
    if location:
        query = query.filter(Item.location == location)
    
    # Apply status filter
    if status:
        query = query.filter(Item.status == status)
    
    # Apply team filter for non-admins
    if not current_user.is_admin():
        team_ids = [team.id for team in current_user.teams]
        if team_ids:
            query = query.filter(Item.team_id.in_(team_ids))
    
    # Apply sorting
    if sort == 'newest':
        query = query.order_by(Item.created_at.desc())
    elif sort == 'oldest':
        query = query.order_by(Item.created_at.asc())
    elif sort == 'name':
        query = query.order_by(Item.name.asc())
    elif sort == 'quantity_high':
        query = query.order_by(Item.quantity.desc())
    elif sort == 'quantity_low':
        query = query.order_by(Item.quantity.asc())
    else:
        query = query.order_by(Item.created_at.desc())
    
    # Paginate results
    pagination = query.paginate(
        page=page,
        per_page=Config.ITEMS_PER_PAGE,
        error_out=False
    )
    
    # Get categories for filter dropdown
    categories = Category.query.filter_by(is_active=True).order_by(Category.name).all()
    
    # Get unique locations for filter
    locations = db.session.query(Item.location).distinct().filter(
        Item.location.isnot(None),
        Item.location != ''
    ).order_by(Item.location).all()
    locations = [loc[0] for loc in locations]
    
    # Check if this is an HTMX request
    if request.headers.get('HX-Request'):
        # Return only the items grid partial
        return render_template('items/partials/items_grid.html',
                             items=pagination.items,
                             pagination=pagination,
                             search=search,
                             category_id=category_id,
                             location=location,
                             status=status,
                             sort=sort)
    
    # Return full page
    return render_template('items/index.html',
                         items=pagination.items,
                         pagination=pagination,
                         categories=categories,
                         locations=locations,
                         search=search,
                         category_id=category_id,
                         location=location,
                         status=status,
                         sort=sort)

# Detail view route
@items.route("/<int:id>")
@login_required
def detail(id):
    """Item detail view"""
    item = Item.query.get_or_404(id)
    
    # Check access rights
    if not current_user.is_admin():
        team_ids = [team.id for team in current_user.teams]
        if item.team_id and item.team_id not in team_ids:
            flash('Sie haben keine Berechtigung, diesen Artikel anzuzeigen.', 'error')
            return redirect(url_for('items.index'))
    
    # Log view action
    log = Log(
        user_id=current_user.id,
        item_id=item.id,
        action='view',
        details=f'Artikel {item.item_uid} angezeigt'
    )
    db.session.add(log)
    db.session.commit()
    
    # Get recent logs
    recent_logs = Log.query.filter_by(item_id=item.id)\
                          .order_by(Log.timestamp.desc())\
                          .limit(10).all()
    
    # Get creator info
    creator = User.query.get(item.created_by) if item.created_by else None
    
    return render_template('items/detail.html', 
                         item=item,
                         recent_logs=recent_logs,
                         creator=creator)

# Scan route
@items.route("/scan")
@login_required
def scan():
    """QR code scanner page"""
    return render_template('items/scan.html')

# Add Item Routes

# Fixed add route for app/items/routes.py

# EINFACHE VERSION DER add() FUNKTION
# Kopiere diese komplette Funktion in deine app/items/routes.py

@items.route("/add", methods=['GET', 'POST'])
@login_required
def add():
    """Add new item - SIMPLE VERSION"""
    # GET Request - Zeige Formular
    if request.method == 'GET':
        categories = Category.query.filter_by(is_active=True).order_by(Category.name).all()
        return render_template('items/add.html', categories=categories)
    
    # POST Request - Speichere Artikel
    name = request.form.get('name', '').strip()
    quantity = int(request.form.get('quantity', 1))
    category_ids = request.form.getlist('category_ids')
    
    # Validierung
    if not name or not category_ids:
        flash('Name und Kategorie sind erforderlich', 'error')
        return redirect(url_for('items.add'))
    
    # Kategorie für ID
    category = Category.query.get(category_ids[0])
    if not category:
        flash('Ungültige Kategorie', 'error')
        return redirect(url_for('items.add'))
    
    # Artikel erstellen
    item = Item(
        item_uid=generate_item_id(category.prefix),
        name=name,
        quantity=quantity,
        created_by=current_user.id
    )
    
    # Optionale Felder
    item.brand = request.form.get('brand', '')
    item.location = request.form.get('location', '')
    
    # Preis-Felder (mit korrektem Mapping)
    if hasattr(Item, 'price'):
        # Form hat 'sale_price', DB hat 'price'
        item.price = float(request.form.get('sale_price', 0))
    if hasattr(Item, 'purchase_price'):
        item.purchase_price = float(request.form.get('purchase_price', 0))
    
    # Weitere Felder
    if hasattr(Item, 'notes'):
        # Form hat 'description', DB hat 'notes'
        item.notes = request.form.get('description', '')
    if hasattr(Item, 'condition'):
        # Form hat 'status', DB hat 'condition'
        item.condition = request.form.get('status', 'Gut')
    
    # Kategorien hinzufügen
    for cat_id in category_ids:
        cat = Category.query.get(cat_id)
        if cat:
            item.categories.append(cat)
    
    # Speichern
    try:
        db.session.add(item)
        db.session.commit()
        
        # Log
        log = Log(
            user_id=current_user.id,
            item_id=item.id,
            action='create',
            details=f'Artikel {item.item_uid} erstellt'
        )
        db.session.add(log)
        db.session.commit()
        
        flash(f'Artikel {item.item_uid} erfolgreich erstellt!', 'success')
        
        # WICHTIG: Einfacher Redirect ohne HTMX
        # Option 1: Zur Detail-Seite (wenn sie existiert)
        # return redirect(url_for('items.detail', id=item.id))
        
        # Option 2: Zur Index-Seite (funktioniert immer)
        return redirect(url_for('items.index'))
        
    except Exception as e:
        db.session.rollback()
        flash(f'Fehler: {str(e)}', 'error')
        return redirect(url_for('items.add'))

@items.route("/check_duplicate")
@login_required
def check_duplicate():
    """Check if item name already exists (HTMX endpoint)"""
    name = request.args.get('name', '').strip()
    
    if not name:
        return ""
    
    existing = Item.query.filter_by(name=name).first()
    
    if existing:
        return '<span class="text-warning"><i class="bi bi-exclamation-triangle"></i> Ein Artikel mit diesem Namen existiert bereits</span>'
    
    return '<span class="text-success"><i class="bi bi-check-circle"></i> Name ist verfügbar</span>'

@items.route("/preview_id", methods=['POST'])
@login_required
def preview_id():
    """Preview generated item ID based on selected categories (HTMX endpoint)"""
    category_ids = request.form.getlist('category_ids')
    
    if not category_ids:
        return '''<div class="alert alert-info">
            <i class="bi bi-info-circle"></i> 
            Wählen Sie eine Kategorie aus, um die Artikel-ID zu generieren
        </div>'''
    
    # Get first category
    category = Category.query.get(category_ids[0])
    if not category:
        return '<div class="alert alert-warning">Ungültige Kategorie</div>'
    
    # Generate preview ID
    next_id = generate_item_id(category.prefix)
    
    return f'''<div class="alert alert-success">
        <i class="bi bi-check-circle"></i> 
        Artikel-ID wird sein: <strong>{next_id}</strong>
        <small class="text-muted">(Kategorie: {category.name})</small>
    </div>'''

@items.route("/upload_preview", methods=['POST'])
@login_required
def upload_preview():
    """Preview uploaded image (HTMX endpoint)"""
    if 'image' not in request.files:
        return ""
    
    file = request.files['image']
    if not file or not file.filename:
        return ""
    
    if not allowed_file(file.filename):
        return '<div class="alert alert-danger">Ungültiges Dateiformat. Erlaubt: JPG, PNG, WebP</div>'
    
    # For preview, we'll just show the filename
    # In production, you might want to actually save a temp file
    return f'''<div class="alert alert-info">
        <i class="bi bi-image"></i> Bild ausgewählt: {secure_filename(file.filename)}
    </div>'''
# Add these routes to your app/items/routes.py file

# Fixed edit route for app/items/routes.py

@items.route("/<int:id>/edit", methods=['GET', 'POST'])
@login_required
def edit(id):
    """Edit item"""
    item = Item.query.get_or_404(id)
    
    # Check permission
    if not current_user.is_admin() and item.created_by != current_user.id:
        flash('Sie können nur Ihre eigenen Artikel bearbeiten.', 'error')
        return redirect(url_for('items.detail', id=id))
    
    if request.method == 'GET':
        categories = Category.query.filter_by(is_active=True).order_by(Category.name).all()
        return render_template('items/edit.html', item=item, categories=categories)
    
    # Handle POST - Update item
    try:
        # Update basic fields - use only existing model fields
        item.name = request.form.get('name', '').strip()
        item.brand = request.form.get('brand', '').strip()
        item.model = request.form.get('model', '').strip()
        item.quantity = int(request.form.get('quantity', 0))
        item.location = request.form.get('location', '').strip()
        item.room = request.form.get('room', '').strip()
        item.shelf = request.form.get('shelf', '').strip()
        item.compartment = request.form.get('compartment', '').strip()
        item.purchase_price = float(request.form.get('purchase_price') or 0)
        item.price = float(request.form.get('sale_price') or 0)  # Map sale_price to price
        item.notes = request.form.get('description', '').strip()  # Map description to notes
        item.serial_number = request.form.get('serial_number', '').strip()
        item.condition = request.form.get('status', 'Gut')  # Map status to condition
        
        # Update categories
        category_ids = request.form.getlist('category_ids')
        item.categories.clear()
        for cat_id in category_ids:
            category = Category.query.get(cat_id)
            if category:
                item.categories.append(category)
        
        # Handle image removal
        if request.form.get('remove_image') and item.image_file:
            # Delete old image file
            old_image_path = os.path.join(Config.UPLOAD_FOLDER, item.image_file)
            if os.path.exists(old_image_path):
                os.remove(old_image_path)
            item.image_file = None
        
        # Handle new image upload
        if 'image' in request.files:
            file = request.files['image']
            if file and file.filename and allowed_file(file.filename):
                # Delete old image if exists
                if item.image_file:
                    old_image_path = os.path.join(Config.UPLOAD_FOLDER, item.image_file)
                    if os.path.exists(old_image_path):
                        os.remove(old_image_path)
                
                # Save new image
                filename = secure_filename(file.filename)
                name_parts = filename.rsplit('.', 1)
                filename = f"{name_parts[0]}_{datetime.now().strftime('%Y%m%d%H%M%S')}.{name_parts[1]}"
                
                upload_folder = Config.UPLOAD_FOLDER
                os.makedirs(upload_folder, exist_ok=True)
                
                filepath = os.path.join(upload_folder, filename)
                file.save(filepath)
                item.image_file = filename
        
        # Update timestamp
        item.updated_at = datetime.utcnow()
        
        # Save changes
        db.session.commit()
        
        # Log action
        log = Log(
            user_id=current_user.id,
            item_id=item.id,
            action='update',
            details=f'Artikel {item.item_uid} aktualisiert'
        )
        db.session.add(log)
        db.session.commit()
        
        flash('Artikel wurde erfolgreich aktualisiert!', 'success')
        
        # Standard redirect
        return redirect(url_for('items.detail', id=item.id))
        
    except Exception as e:
        db.session.rollback()
        flash(f'Fehler beim Aktualisieren: {str(e)}', 'error')
        return redirect(url_for('items.edit', id=id))

@items.route("/<int:id>/delete", methods=['DELETE'])
@login_required
def delete(id):
    """Delete item (HTMX endpoint)"""
    item = Item.query.get_or_404(id)
    
    # Check permission
    if not current_user.is_admin() and item.created_by != current_user.id:
        return jsonify({'error': 'Keine Berechtigung'}), 403
    
    try:
        # Delete image file if exists
        if item.image_file:
            image_path = os.path.join(Config.UPLOAD_FOLDER, item.image_file)
            if os.path.exists(image_path):
                os.remove(image_path)
        
        # Log deletion before deleting item
        log = Log(
            user_id=current_user.id,
            item_id=None,  # Set to None as item will be deleted
            action='delete',
            details=f'Artikel {item.item_uid} ({item.name}) gelöscht'
        )
        db.session.add(log)
        
        # Delete item
        db.session.delete(item)
        db.session.commit()
        
        # HTMX response - redirect to index
        response = redirect(url_for("items.detail", id=item.id))
        response.headers['HX-Redirect'] = url_for('items.index')
        return response
        
    except Exception as e:
        db.session.rollback()
        return jsonify({'error': str(e)}), 500

@items.route("/<int:id>/quick_update", methods=['POST'])
@login_required
def quick_update(id):
    """Quick update for quantity (HTMX endpoint)"""
    item = Item.query.get_or_404(id)
    action = request.form.get('action')
    
    if action == 'increment':
        item.quantity += 1
    elif action == 'decrement' and item.quantity > 0:
        item.quantity -= 1
    
    db.session.commit()
    
    # Return updated quantity badge
    return f'<span id="quantity-{item.id}" class="btn btn-outline-secondary disabled">{item.quantity}</span>'
# Add these routes to your app/items/routes.py file

@items.route("/search/<item_uid>")
@login_required
def search_by_uid(item_uid):
    """Search and redirect to item by UID"""
    item = Item.query.filter_by(item_uid=item_uid).first()
    
    if item:
        # Check access rights
        if not current_user.is_admin():
            team_ids = [team.id for team in current_user.teams]
            if item.team_id and item.team_id not in team_ids:
                flash('Sie haben keine Berechtigung, diesen Artikel anzuzeigen.', 'error')
                return redirect(url_for('items.index'))
        
        return redirect(url_for('items.detail', id=item.id))
    else:
        flash(f'Artikel mit ID {item_uid} nicht gefunden.', 'warning')
        return redirect(url_for('items.scan'))

@items.route("/search_by_id")
@login_required
def search_by_id():
    """AJAX search by item ID (for manual input)"""
    item_uid = request.args.get('item_uid', '').strip().upper()
    
    if not item_uid:
        return '<div class="alert alert-warning">Bitte geben Sie eine Artikel-ID ein.</div>'
    
    item = Item.query.filter_by(item_uid=item_uid).first()
    
    if item:
        # Check access rights
        if not current_user.is_admin():
            team_ids = [team.id for team in current_user.teams]
            if item.team_id and item.team_id not in team_ids:
                return '<div class="alert alert-danger">Keine Berechtigung für diesen Artikel.</div>'
        
        # Return item card
        return f'''
        <div class="card mt-3">
            <div class="card-body">
                <h5 class="card-title">{item.name}</h5>
                <p class="card-text">
                    <strong>ID:</strong> {item.item_uid}<br>
                    <strong>Marke:</strong> {item.brand or '-'}<br>
                    <strong>Bestand:</strong> {item.quantity}<br>
                    <strong>Standort:</strong> {item.location or '-'}
                </p>
                <a href="{url_for('items.detail', id=item.id)}" class="btn btn-primary">
                    <i class="bi bi-eye"></i> Details anzeigen
                </a>
            </div>
        </div>
        '''
    else:
        return f'<div class="alert alert-warning">Kein Artikel mit der ID <strong>{item_uid}</strong> gefunden.</div>'
